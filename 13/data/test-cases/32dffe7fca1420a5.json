{
  "uid" : "32dffe7fca1420a5",
  "name" : "test_error_small_balance",
  "fullName" : "test.test_main_page.TestMainPage#test_error_small_balance",
  "historyId" : "60f850f373cad4b08b79193da6847804",
  "time" : {
    "start" : 1650903983780,
    "stop" : 1650903983780,
    "duration" : 0
  },
  "description" : "\n        Попытка купить, если недостаточный баланс.\n        ",
  "descriptionHtml" : "<pre><code>    Попытка купить, если недостаточный баланс.\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x557b56049ad3 <unknown>\n#1 0x557b55da9568 <unknown>\n#2 0x557b55dccb37 <unknown>\n#3 0x557b55dc823a <unknown>\n#4 0x557b55e032ba <unknown>\n#5 0x557b55dfd4e3 <unknown>\n#6 0x557b55dd2d1a <unknown>\n#7 0x557b55dd3e75 <unknown>\n#8 0x557b56077efd <unknown>\n#9 0x557b5609119b <unknown>\n#10 0x557b56079c65 <unknown>\n#11 0x557b56091ec8 <unknown>\n#12 0x557b5606d360 <unknown>\n#13 0x557b560ada68 <unknown>\n#14 0x557b560adbe8 <unknown>\n#15 0x557b560c77fd <unknown>\n#16 0x7f117116f609 <unknown>",
  "statusTrace" : "request = <SubRequest 'app' for <Function test_error_small_balance>>\n\n    @pytest.fixture\n    def app(request):\n        url = request.config.getoption(\"--url\")\n        logger.info(f\"Start app on {url}\")\n        headless = request.config.getoption(\"--headless\")\n        chrome_options = Options()\n        chrome_options.add_argument(\"window-size=1800,1080\")\n        if headless:\n            chrome_options.headless = True\n        else:\n            chrome_options.headless = False\n>       driver = webdriver.Chrome(ChromeDriverManager().install(),\n                                  options=chrome_options)\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7728bc2ac0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x557b560adbe8 \\\\u003Cunknown>\\\\n#15 0x557b560c77fd \\\\u003Cunknown>\\\\n#16 0x7f117116f609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x557b56049ad3 <unknown>\nE       #1 0x557b55da9568 <unknown>\nE       #2 0x557b55dccb37 <unknown>\nE       #3 0x557b55dc823a <unknown>\nE       #4 0x557b55e032ba <unknown>\nE       #5 0x557b55dfd4e3 <unknown>\nE       #6 0x557b55dd2d1a <unknown>\nE       #7 0x557b55dd3e75 <unknown>\nE       #8 0x557b56077efd <unknown>\nE       #9 0x557b5609119b <unknown>\nE       #10 0x557b56079c65 <unknown>\nE       #11 0x557b56091ec8 <unknown>\nE       #12 0x557b5606d360 <unknown>\nE       #13 0x557b560ada68 <unknown>\nE       #14 0x557b560adbe8 <unknown>\nE       #15 0x557b560c77fd <unknown>\nE       #16 0x7f117116f609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1650903973024,
      "stop" : 1650903973036,
      "duration" : 12
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "app",
    "time" : {
      "start" : 1650903984248,
      "stop" : 1650903984951,
      "duration" : 703
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x557b56049ad3 <unknown>\n#1 0x557b55da9568 <unknown>\n#2 0x557b55dccb37 <unknown>\n#3 0x557b55dc823a <unknown>\n#4 0x557b55e032ba <unknown>\n#5 0x557b55dfd4e3 <unknown>\n#6 0x557b55dd2d1a <unknown>\n#7 0x557b55dd3e75 <unknown>\n#8 0x557b56077efd <unknown>\n#9 0x557b5609119b <unknown>\n#10 0x557b56079c65 <unknown>\n#11 0x557b56091ec8 <unknown>\n#12 0x557b5606d360 <unknown>\n#13 0x557b560ada68 <unknown>\n#14 0x557b560adbe8 <unknown>\n#15 0x557b560c77fd <unknown>\n#16 0x7f117116f609 <unknown>\n\n",
    "statusTrace" : "  File \"/home/runner/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1122, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 917, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/Test_with_a_team/Test_with_a_team/conftest.py\", line 38, in app\n    driver = webdriver.Chrome(ChromeDriverManager().install(),\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py\", line 70, in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py\", line 93, in __init__\n    RemoteWebDriver.__init__(\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 269, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 360, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "register_user",
    "time" : {
      "start" : 1650903983780,
      "stop" : 1650903984248,
      "duration" : 468
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        Попытка купить, если недостаточный баланс.\n        ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x557b56049ad3 <unknown>\n#1 0x557b55da9568 <unknown>\n#2 0x557b55dccb37 <unknown>\n#3 0x557b55dc823a <unknown>\n#4 0x557b55e032ba <unknown>\n#5 0x557b55dfd4e3 <unknown>\n#6 0x557b55dd2d1a <unknown>\n#7 0x557b55dd3e75 <unknown>\n#8 0x557b56077efd <unknown>\n#9 0x557b5609119b <unknown>\n#10 0x557b56079c65 <unknown>\n#11 0x557b56091ec8 <unknown>\n#12 0x557b5606d360 <unknown>\n#13 0x557b560ada68 <unknown>\n#14 0x557b560adbe8 <unknown>\n#15 0x557b560c77fd <unknown>\n#16 0x7f117116f609 <unknown>",
    "statusTrace" : "request = <SubRequest 'app' for <Function test_error_small_balance>>\n\n    @pytest.fixture\n    def app(request):\n        url = request.config.getoption(\"--url\")\n        logger.info(f\"Start app on {url}\")\n        headless = request.config.getoption(\"--headless\")\n        chrome_options = Options()\n        chrome_options.add_argument(\"window-size=1800,1080\")\n        if headless:\n            chrome_options.headless = True\n        else:\n            chrome_options.headless = False\n>       driver = webdriver.Chrome(ChromeDriverManager().install(),\n                                  options=chrome_options)\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7728bc2ac0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x557b560adbe8 \\\\u003Cunknown>\\\\n#15 0x557b560c77fd \\\\u003Cunknown>\\\\n#16 0x7f117116f609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x557b56049ad3 <unknown>\nE       #1 0x557b55da9568 <unknown>\nE       #2 0x557b55dccb37 <unknown>\nE       #3 0x557b55dc823a <unknown>\nE       #4 0x557b55e032ba <unknown>\nE       #5 0x557b55dfd4e3 <unknown>\nE       #6 0x557b55dd2d1a <unknown>\nE       #7 0x557b55dd3e75 <unknown>\nE       #8 0x557b56077efd <unknown>\nE       #9 0x557b5609119b <unknown>\nE       #10 0x557b56079c65 <unknown>\nE       #11 0x557b56091ec8 <unknown>\nE       #12 0x557b5606d360 <unknown>\nE       #13 0x557b560ada68 <unknown>\nE       #14 0x557b560adbe8 <unknown>\nE       #15 0x557b560c77fd <unknown>\nE       #16 0x7f117116f609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6246b380c13e86ee",
      "name" : "log",
      "source" : "6246b380c13e86ee.txt",
      "type" : "text/plain",
      "size" : 523
    }, {
      "uid" : "f38d27cacb208d16",
      "name" : "stderr",
      "source" : "f38d27cacb208d16.txt",
      "type" : "text/plain",
      "size" : 237
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Test main page"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_main_page"
  }, {
    "name" : "subSuite",
    "value" : "TestMainPage"
  }, {
    "name" : "host",
    "value" : "fv-az292-76"
  }, {
    "name" : "thread",
    "value" : "2221-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_main_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "592fe5a7eb8c028c",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/12//#testresult/592fe5a7eb8c028c",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55922cfafad3 <unknown>\n#1 0x55922cd0f568 <unknown>\n#2 0x55922cd32b37 <unknown>\n#3 0x55922cd2e23a <unknown>\n#4 0x55922cd692ba <unknown>\n#5 0x55922cd634e3 <unknown>\n#6 0x55922cd38d1a <unknown>\n#7 0x55922cd39e75 <unknown>\n#8 0x55922cfddefd <unknown>\n#9 0x55922cff719b <unknown>\n#10 0x55922cfdfc65 <unknown>\n#11 0x55922cff7ec8 <unknown>\n#12 0x55922cfd3360 <unknown>\n#13 0x55922d013a68 <unknown>\n#14 0x55922d013be8 <unknown>\n#15 0x55922d02d7fd <unknown>\n#16 0x7f8868f19609 <unknown>",
        "time" : {
          "start" : 1650903810726,
          "stop" : 1650903810726,
          "duration" : 0
        }
      }, {
        "uid" : "5e982453ef6fb951",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/9//#testresult/5e982453ef6fb951",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55666081fad3 <unknown>\n#1 0x55666057f568 <unknown>\n#2 0x5566605a2b37 <unknown>\n#3 0x55666059e23a <unknown>\n#4 0x5566605d92ba <unknown>\n#5 0x5566605d34e3 <unknown>\n#6 0x5566605a8d1a <unknown>\n#7 0x5566605a9e75 <unknown>\n#8 0x55666084defd <unknown>\n#9 0x55666086719b <unknown>\n#10 0x55666084fc65 <unknown>\n#11 0x556660867ec8 <unknown>\n#12 0x556660843360 <unknown>\n#13 0x556660883a68 <unknown>\n#14 0x556660883be8 <unknown>\n#15 0x55666089d7fd <unknown>\n#16 0x7fdd199b2609 <unknown>",
        "time" : {
          "start" : 1650554009915,
          "stop" : 1650554009915,
          "duration" : 0
        }
      }, {
        "uid" : "b58d1906bdb6c903",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/8//#testresult/b58d1906bdb6c903",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5596dc782ad3 <unknown>\n#1 0x5596dc4e2568 <unknown>\n#2 0x5596dc505b37 <unknown>\n#3 0x5596dc50123a <unknown>\n#4 0x5596dc53c2ba <unknown>\n#5 0x5596dc5364e3 <unknown>\n#6 0x5596dc50bd1a <unknown>\n#7 0x5596dc50ce75 <unknown>\n#8 0x5596dc7b0efd <unknown>\n#9 0x5596dc7ca19b <unknown>\n#10 0x5596dc7b2c65 <unknown>\n#11 0x5596dc7caec8 <unknown>\n#12 0x5596dc7a6360 <unknown>\n#13 0x5596dc7e6a68 <unknown>\n#14 0x5596dc7e6be8 <unknown>\n#15 0x5596dc8007fd <unknown>\n#16 0x7f76b506e609 <unknown>",
        "time" : {
          "start" : 1650553932979,
          "stop" : 1650553932979,
          "duration" : 0
        }
      }, {
        "uid" : "a6f5006cccca5443",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/7//#testresult/a6f5006cccca5443",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x563223ff8ad3 <unknown>\n#1 0x563223d58568 <unknown>\n#2 0x563223d7bb37 <unknown>\n#3 0x563223d7723a <unknown>\n#4 0x563223db22ba <unknown>\n#5 0x563223dac4e3 <unknown>\n#6 0x563223d81d1a <unknown>\n#7 0x563223d82e75 <unknown>\n#8 0x563224026efd <unknown>\n#9 0x56322404019b <unknown>\n#10 0x563224028c65 <unknown>\n#11 0x563224040ec8 <unknown>\n#12 0x56322401c360 <unknown>\n#13 0x56322405ca68 <unknown>\n#14 0x56322405cbe8 <unknown>\n#15 0x5632240767fd <unknown>\n#16 0x7f14f1b2a609 <unknown>",
        "time" : {
          "start" : 1650553748975,
          "stop" : 1650553748975,
          "duration" : 0
        }
      }, {
        "uid" : "bfebc455b2cbebbc",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/6//#testresult/bfebc455b2cbebbc",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5638f902bad3 <unknown>\n#1 0x5638f8d8b568 <unknown>\n#2 0x5638f8daeb37 <unknown>\n#3 0x5638f8daa23a <unknown>\n#4 0x5638f8de52ba <unknown>\n#5 0x5638f8ddf4e3 <unknown>\n#6 0x5638f8db4d1a <unknown>\n#7 0x5638f8db5e75 <unknown>\n#8 0x5638f9059efd <unknown>\n#9 0x5638f907319b <unknown>\n#10 0x5638f905bc65 <unknown>\n#11 0x5638f9073ec8 <unknown>\n#12 0x5638f904f360 <unknown>\n#13 0x5638f908fa68 <unknown>\n#14 0x5638f908fbe8 <unknown>\n#15 0x5638f90a97fd <unknown>\n#16 0x7ff3b9cc0609 <unknown>",
        "time" : {
          "start" : 1650553594407,
          "stop" : 1650553594407,
          "duration" : 0
        }
      }, {
        "uid" : "54a9d312674ff5a6",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/4//#testresult/54a9d312674ff5a6",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55b425955ad3 <unknown>\n#1 0x55b4256b5568 <unknown>\n#2 0x55b4256d8b37 <unknown>\n#3 0x55b4256d423a <unknown>\n#4 0x55b42570f2ba <unknown>\n#5 0x55b4257094e3 <unknown>\n#6 0x55b4256ded1a <unknown>\n#7 0x55b4256dfe75 <unknown>\n#8 0x55b425983efd <unknown>\n#9 0x55b42599d19b <unknown>\n#10 0x55b425985c65 <unknown>\n#11 0x55b42599dec8 <unknown>\n#12 0x55b425979360 <unknown>\n#13 0x55b4259b9a68 <unknown>\n#14 0x55b4259b9be8 <unknown>\n#15 0x55b4259d37fd <unknown>\n#16 0x7ff479a12609 <unknown>",
        "time" : {
          "start" : 1650552892731,
          "stop" : 1650552892731,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "32dffe7fca1420a5.json",
  "parameterValues" : [ ]
}