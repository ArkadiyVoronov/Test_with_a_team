{
  "uid" : "b407334e53b5e817",
  "name" : "test_empty_card_name",
  "fullName" : "test.test_balance_page.TestBalancePage#test_empty_card_name",
  "historyId" : "1a30aaf420c2497df1440669760fdbe5",
  "time" : {
    "start" : 1650903975045,
    "stop" : 1650903975045,
    "duration" : 0
  },
  "description" : "\n        Пополнение баланса без заполнения имени держателя карты.\n        ",
  "descriptionHtml" : "<pre><code>    Пополнение баланса без заполнения имени держателя карты.\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5607ccc44ad3 <unknown>\n#1 0x5607cc9a4568 <unknown>\n#2 0x5607cc9c7b37 <unknown>\n#3 0x5607cc9c323a <unknown>\n#4 0x5607cc9fe2ba <unknown>\n#5 0x5607cc9f84e3 <unknown>\n#6 0x5607cc9cdd1a <unknown>\n#7 0x5607cc9cee75 <unknown>\n#8 0x5607ccc72efd <unknown>\n#9 0x5607ccc8c19b <unknown>\n#10 0x5607ccc74c65 <unknown>\n#11 0x5607ccc8cec8 <unknown>\n#12 0x5607ccc68360 <unknown>\n#13 0x5607ccca8a68 <unknown>\n#14 0x5607ccca8be8 <unknown>\n#15 0x5607cccc27fd <unknown>\n#16 0x7f12dfd58609 <unknown>",
  "statusTrace" : "request = <SubRequest 'app' for <Function test_empty_card_name>>\n\n    @pytest.fixture\n    def app(request):\n        url = request.config.getoption(\"--url\")\n        logger.info(f\"Start app on {url}\")\n        headless = request.config.getoption(\"--headless\")\n        chrome_options = Options()\n        chrome_options.add_argument(\"window-size=1800,1080\")\n        if headless:\n            chrome_options.headless = True\n        else:\n            chrome_options.headless = False\n>       driver = webdriver.Chrome(ChromeDriverManager().install(),\n                                  options=chrome_options)\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7728d3d700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x5607ccca8be8 \\\\u003Cunknown>\\\\n#15 0x5607cccc27fd \\\\u003Cunknown>\\\\n#16 0x7f12dfd58609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5607ccc44ad3 <unknown>\nE       #1 0x5607cc9a4568 <unknown>\nE       #2 0x5607cc9c7b37 <unknown>\nE       #3 0x5607cc9c323a <unknown>\nE       #4 0x5607cc9fe2ba <unknown>\nE       #5 0x5607cc9f84e3 <unknown>\nE       #6 0x5607cc9cdd1a <unknown>\nE       #7 0x5607cc9cee75 <unknown>\nE       #8 0x5607ccc72efd <unknown>\nE       #9 0x5607ccc8c19b <unknown>\nE       #10 0x5607ccc74c65 <unknown>\nE       #11 0x5607ccc8cec8 <unknown>\nE       #12 0x5607ccc68360 <unknown>\nE       #13 0x5607ccca8a68 <unknown>\nE       #14 0x5607ccca8be8 <unknown>\nE       #15 0x5607cccc27fd <unknown>\nE       #16 0x7f12dfd58609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "register_user",
    "time" : {
      "start" : 1650903973037,
      "stop" : 1650903973485,
      "duration" : 448
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "app",
    "time" : {
      "start" : 1650903975045,
      "stop" : 1650903975758,
      "duration" : 713
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5607ccc44ad3 <unknown>\n#1 0x5607cc9a4568 <unknown>\n#2 0x5607cc9c7b37 <unknown>\n#3 0x5607cc9c323a <unknown>\n#4 0x5607cc9fe2ba <unknown>\n#5 0x5607cc9f84e3 <unknown>\n#6 0x5607cc9cdd1a <unknown>\n#7 0x5607cc9cee75 <unknown>\n#8 0x5607ccc72efd <unknown>\n#9 0x5607ccc8c19b <unknown>\n#10 0x5607ccc74c65 <unknown>\n#11 0x5607ccc8cec8 <unknown>\n#12 0x5607ccc68360 <unknown>\n#13 0x5607ccca8a68 <unknown>\n#14 0x5607ccca8be8 <unknown>\n#15 0x5607cccc27fd <unknown>\n#16 0x7f12dfd58609 <unknown>\n\n",
    "statusTrace" : "  File \"/home/runner/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1122, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 917, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/Test_with_a_team/Test_with_a_team/conftest.py\", line 38, in app\n    driver = webdriver.Chrome(ChromeDriverManager().install(),\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py\", line 70, in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py\", line 93, in __init__\n    RemoteWebDriver.__init__(\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 269, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 360, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1650903973024,
      "stop" : 1650903973036,
      "duration" : 12
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        Пополнение баланса без заполнения имени держателя карты.\n        ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5607ccc44ad3 <unknown>\n#1 0x5607cc9a4568 <unknown>\n#2 0x5607cc9c7b37 <unknown>\n#3 0x5607cc9c323a <unknown>\n#4 0x5607cc9fe2ba <unknown>\n#5 0x5607cc9f84e3 <unknown>\n#6 0x5607cc9cdd1a <unknown>\n#7 0x5607cc9cee75 <unknown>\n#8 0x5607ccc72efd <unknown>\n#9 0x5607ccc8c19b <unknown>\n#10 0x5607ccc74c65 <unknown>\n#11 0x5607ccc8cec8 <unknown>\n#12 0x5607ccc68360 <unknown>\n#13 0x5607ccca8a68 <unknown>\n#14 0x5607ccca8be8 <unknown>\n#15 0x5607cccc27fd <unknown>\n#16 0x7f12dfd58609 <unknown>",
    "statusTrace" : "request = <SubRequest 'app' for <Function test_empty_card_name>>\n\n    @pytest.fixture\n    def app(request):\n        url = request.config.getoption(\"--url\")\n        logger.info(f\"Start app on {url}\")\n        headless = request.config.getoption(\"--headless\")\n        chrome_options = Options()\n        chrome_options.add_argument(\"window-size=1800,1080\")\n        if headless:\n            chrome_options.headless = True\n        else:\n            chrome_options.headless = False\n>       driver = webdriver.Chrome(ChromeDriverManager().install(),\n                                  options=chrome_options)\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7728d3d700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x5607ccca8be8 \\\\u003Cunknown>\\\\n#15 0x5607cccc27fd \\\\u003Cunknown>\\\\n#16 0x7f12dfd58609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5607ccc44ad3 <unknown>\nE       #1 0x5607cc9a4568 <unknown>\nE       #2 0x5607cc9c7b37 <unknown>\nE       #3 0x5607cc9c323a <unknown>\nE       #4 0x5607cc9fe2ba <unknown>\nE       #5 0x5607cc9f84e3 <unknown>\nE       #6 0x5607cc9cdd1a <unknown>\nE       #7 0x5607cc9cee75 <unknown>\nE       #8 0x5607ccc72efd <unknown>\nE       #9 0x5607ccc8c19b <unknown>\nE       #10 0x5607ccc74c65 <unknown>\nE       #11 0x5607ccc8cec8 <unknown>\nE       #12 0x5607ccc68360 <unknown>\nE       #13 0x5607ccca8a68 <unknown>\nE       #14 0x5607ccca8be8 <unknown>\nE       #15 0x5607cccc27fd <unknown>\nE       #16 0x7f12dfd58609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "87b5086e37d54a29",
      "name" : "log",
      "source" : "87b5086e37d54a29.txt",
      "type" : "text/plain",
      "size" : 438
    }, {
      "uid" : "ae7058ec8d4ad8bf",
      "name" : "stderr",
      "source" : "ae7058ec8d4ad8bf.txt",
      "type" : "text/plain",
      "size" : 237
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "Test balance"
  }, {
    "name" : "feature",
    "value" : "Test card"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_balance_page"
  }, {
    "name" : "subSuite",
    "value" : "TestBalancePage"
  }, {
    "name" : "host",
    "value" : "fv-az292-76"
  }, {
    "name" : "thread",
    "value" : "2221-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_balance_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "9e765f9db10544dc",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/12//#testresult/9e765f9db10544dc",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55cd352a5ad3 <unknown>\n#1 0x55cd35005568 <unknown>\n#2 0x55cd35028b37 <unknown>\n#3 0x55cd3502423a <unknown>\n#4 0x55cd3505f2ba <unknown>\n#5 0x55cd350594e3 <unknown>\n#6 0x55cd3502ed1a <unknown>\n#7 0x55cd3502fe75 <unknown>\n#8 0x55cd352d3efd <unknown>\n#9 0x55cd352ed19b <unknown>\n#10 0x55cd352d5c65 <unknown>\n#11 0x55cd352edec8 <unknown>\n#12 0x55cd352c9360 <unknown>\n#13 0x55cd35309a68 <unknown>\n#14 0x55cd35309be8 <unknown>\n#15 0x55cd353237fd <unknown>\n#16 0x7f9a3825d609 <unknown>",
        "time" : {
          "start" : 1650903802017,
          "stop" : 1650903802017,
          "duration" : 0
        }
      }, {
        "uid" : "311db8773c9c6e09",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/9//#testresult/311db8773c9c6e09",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559aed2e6ad3 <unknown>\n#1 0x559aed046568 <unknown>\n#2 0x559aed069b37 <unknown>\n#3 0x559aed06523a <unknown>\n#4 0x559aed0a02ba <unknown>\n#5 0x559aed09a4e3 <unknown>\n#6 0x559aed06fd1a <unknown>\n#7 0x559aed070e75 <unknown>\n#8 0x559aed314efd <unknown>\n#9 0x559aed32e19b <unknown>\n#10 0x559aed316c65 <unknown>\n#11 0x559aed32eec8 <unknown>\n#12 0x559aed30a360 <unknown>\n#13 0x559aed34aa68 <unknown>\n#14 0x559aed34abe8 <unknown>\n#15 0x559aed3647fd <unknown>\n#16 0x7fa8b7aa9609 <unknown>",
        "time" : {
          "start" : 1650554001155,
          "stop" : 1650554001155,
          "duration" : 0
        }
      }, {
        "uid" : "20580c48cf878cee",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/8//#testresult/20580c48cf878cee",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56433a9dcad3 <unknown>\n#1 0x56433a73c568 <unknown>\n#2 0x56433a75fb37 <unknown>\n#3 0x56433a75b23a <unknown>\n#4 0x56433a7962ba <unknown>\n#5 0x56433a7904e3 <unknown>\n#6 0x56433a765d1a <unknown>\n#7 0x56433a766e75 <unknown>\n#8 0x56433aa0aefd <unknown>\n#9 0x56433aa2419b <unknown>\n#10 0x56433aa0cc65 <unknown>\n#11 0x56433aa24ec8 <unknown>\n#12 0x56433aa00360 <unknown>\n#13 0x56433aa40a68 <unknown>\n#14 0x56433aa40be8 <unknown>\n#15 0x56433aa5a7fd <unknown>\n#16 0x7fa065b71609 <unknown>",
        "time" : {
          "start" : 1650553924360,
          "stop" : 1650553924360,
          "duration" : 0
        }
      }, {
        "uid" : "4499f3c463d76d36",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/7//#testresult/4499f3c463d76d36",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x555922ce1ad3 <unknown>\n#1 0x555922a41568 <unknown>\n#2 0x555922a64b37 <unknown>\n#3 0x555922a6023a <unknown>\n#4 0x555922a9b2ba <unknown>\n#5 0x555922a954e3 <unknown>\n#6 0x555922a6ad1a <unknown>\n#7 0x555922a6be75 <unknown>\n#8 0x555922d0fefd <unknown>\n#9 0x555922d2919b <unknown>\n#10 0x555922d11c65 <unknown>\n#11 0x555922d29ec8 <unknown>\n#12 0x555922d05360 <unknown>\n#13 0x555922d45a68 <unknown>\n#14 0x555922d45be8 <unknown>\n#15 0x555922d5f7fd <unknown>\n#16 0x7f9a3dbed609 <unknown>",
        "time" : {
          "start" : 1650553740523,
          "stop" : 1650553740523,
          "duration" : 0
        }
      }, {
        "uid" : "2bcaa58c3b14636e",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/6//#testresult/2bcaa58c3b14636e",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x556d74bb2ad3 <unknown>\n#1 0x556d74912568 <unknown>\n#2 0x556d74935b37 <unknown>\n#3 0x556d7493123a <unknown>\n#4 0x556d7496c2ba <unknown>\n#5 0x556d749664e3 <unknown>\n#6 0x556d7493bd1a <unknown>\n#7 0x556d7493ce75 <unknown>\n#8 0x556d74be0efd <unknown>\n#9 0x556d74bfa19b <unknown>\n#10 0x556d74be2c65 <unknown>\n#11 0x556d74bfaec8 <unknown>\n#12 0x556d74bd6360 <unknown>\n#13 0x556d74c16a68 <unknown>\n#14 0x556d74c16be8 <unknown>\n#15 0x556d74c307fd <unknown>\n#16 0x7f942a40f609 <unknown>",
        "time" : {
          "start" : 1650553585216,
          "stop" : 1650553585216,
          "duration" : 0
        }
      }, {
        "uid" : "6b0ee110303c918b",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/4//#testresult/6b0ee110303c918b",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x556558c6bad3 <unknown>\n#1 0x5565589cb568 <unknown>\n#2 0x5565589eeb37 <unknown>\n#3 0x5565589ea23a <unknown>\n#4 0x556558a252ba <unknown>\n#5 0x556558a1f4e3 <unknown>\n#6 0x5565589f4d1a <unknown>\n#7 0x5565589f5e75 <unknown>\n#8 0x556558c99efd <unknown>\n#9 0x556558cb319b <unknown>\n#10 0x556558c9bc65 <unknown>\n#11 0x556558cb3ec8 <unknown>\n#12 0x556558c8f360 <unknown>\n#13 0x556558ccfa68 <unknown>\n#14 0x556558ccfbe8 <unknown>\n#15 0x556558ce97fd <unknown>\n#16 0x7f9973417609 <unknown>",
        "time" : {
          "start" : 1650552883703,
          "stop" : 1650552883703,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b407334e53b5e817.json",
  "parameterValues" : [ ]
}