{
  "uid" : "fb4fe355a198104f",
  "name" : "test_balance_transfer",
  "fullName" : "test.test_balance_page.TestBalancePage#test_balance_transfer",
  "historyId" : "43500b43c94b462fdc63cdee80f8f8a8",
  "time" : {
    "start" : 1650553999174,
    "stop" : 1650553999174,
    "duration" : 0
  },
  "description" : "\n        Пополнение баланса.\n        ",
  "descriptionHtml" : "<pre><code>    Пополнение баланса.\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x565491addad3 <unknown>\n#1 0x56549183d568 <unknown>\n#2 0x565491860b37 <unknown>\n#3 0x56549185c23a <unknown>\n#4 0x5654918972ba <unknown>\n#5 0x5654918914e3 <unknown>\n#6 0x565491866d1a <unknown>\n#7 0x565491867e75 <unknown>\n#8 0x565491b0befd <unknown>\n#9 0x565491b2519b <unknown>\n#10 0x565491b0dc65 <unknown>\n#11 0x565491b25ec8 <unknown>\n#12 0x565491b01360 <unknown>\n#13 0x565491b41a68 <unknown>\n#14 0x565491b41be8 <unknown>\n#15 0x565491b5b7fd <unknown>\n#16 0x7f39bc130609 <unknown>",
  "statusTrace" : "request = <SubRequest 'app' for <Function test_balance_transfer>>\n\n    @pytest.fixture\n    def app(request):\n        url = request.config.getoption(\"--url\")\n        logger.info(f\"Start app on {url}\")\n        headless = request.config.getoption(\"--headless\")\n        chrome_options = Options()\n        chrome_options.add_argument(\"window-size=1800,1080\")\n        if headless:\n            chrome_options.headless = True\n        else:\n            chrome_options.headless = False\n>       driver = webdriver.Chrome(ChromeDriverManager().install(),\n                                  options=chrome_options)\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f14527bebb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x565491b41be8 \\\\u003Cunknown>\\\\n#15 0x565491b5b7fd \\\\u003Cunknown>\\\\n#16 0x7f39bc130609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x565491addad3 <unknown>\nE       #1 0x56549183d568 <unknown>\nE       #2 0x565491860b37 <unknown>\nE       #3 0x56549185c23a <unknown>\nE       #4 0x5654918972ba <unknown>\nE       #5 0x5654918914e3 <unknown>\nE       #6 0x565491866d1a <unknown>\nE       #7 0x565491867e75 <unknown>\nE       #8 0x565491b0befd <unknown>\nE       #9 0x565491b2519b <unknown>\nE       #10 0x565491b0dc65 <unknown>\nE       #11 0x565491b25ec8 <unknown>\nE       #12 0x565491b01360 <unknown>\nE       #13 0x565491b41a68 <unknown>\nE       #14 0x565491b41be8 <unknown>\nE       #15 0x565491b5b7fd <unknown>\nE       #16 0x7f39bc130609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "app",
    "time" : {
      "start" : 1650553999659,
      "stop" : 1650554001083,
      "duration" : 1424
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x565491addad3 <unknown>\n#1 0x56549183d568 <unknown>\n#2 0x565491860b37 <unknown>\n#3 0x56549185c23a <unknown>\n#4 0x5654918972ba <unknown>\n#5 0x5654918914e3 <unknown>\n#6 0x565491866d1a <unknown>\n#7 0x565491867e75 <unknown>\n#8 0x565491b0befd <unknown>\n#9 0x565491b2519b <unknown>\n#10 0x565491b0dc65 <unknown>\n#11 0x565491b25ec8 <unknown>\n#12 0x565491b01360 <unknown>\n#13 0x565491b41a68 <unknown>\n#14 0x565491b41be8 <unknown>\n#15 0x565491b5b7fd <unknown>\n#16 0x7f39bc130609 <unknown>\n\n",
    "statusTrace" : "  File \"/home/runner/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1122, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 917, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/Test_with_a_team/Test_with_a_team/conftest.py\", line 38, in app\n    driver = webdriver.Chrome(ChromeDriverManager().install(),\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py\", line 70, in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py\", line 93, in __init__\n    RemoteWebDriver.__init__(\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 269, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 360, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1650553999175,
      "stop" : 1650553999188,
      "duration" : 13
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "register_user",
    "time" : {
      "start" : 1650553999188,
      "stop" : 1650553999659,
      "duration" : 471
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        Пополнение баланса.\n        ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x565491addad3 <unknown>\n#1 0x56549183d568 <unknown>\n#2 0x565491860b37 <unknown>\n#3 0x56549185c23a <unknown>\n#4 0x5654918972ba <unknown>\n#5 0x5654918914e3 <unknown>\n#6 0x565491866d1a <unknown>\n#7 0x565491867e75 <unknown>\n#8 0x565491b0befd <unknown>\n#9 0x565491b2519b <unknown>\n#10 0x565491b0dc65 <unknown>\n#11 0x565491b25ec8 <unknown>\n#12 0x565491b01360 <unknown>\n#13 0x565491b41a68 <unknown>\n#14 0x565491b41be8 <unknown>\n#15 0x565491b5b7fd <unknown>\n#16 0x7f39bc130609 <unknown>",
    "statusTrace" : "request = <SubRequest 'app' for <Function test_balance_transfer>>\n\n    @pytest.fixture\n    def app(request):\n        url = request.config.getoption(\"--url\")\n        logger.info(f\"Start app on {url}\")\n        headless = request.config.getoption(\"--headless\")\n        chrome_options = Options()\n        chrome_options.add_argument(\"window-size=1800,1080\")\n        if headless:\n            chrome_options.headless = True\n        else:\n            chrome_options.headless = False\n>       driver = webdriver.Chrome(ChromeDriverManager().install(),\n                                  options=chrome_options)\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f14527bebb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x565491b41be8 \\\\u003Cunknown>\\\\n#15 0x565491b5b7fd \\\\u003Cunknown>\\\\n#16 0x7f39bc130609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x565491addad3 <unknown>\nE       #1 0x56549183d568 <unknown>\nE       #2 0x565491860b37 <unknown>\nE       #3 0x56549185c23a <unknown>\nE       #4 0x5654918972ba <unknown>\nE       #5 0x5654918914e3 <unknown>\nE       #6 0x565491866d1a <unknown>\nE       #7 0x565491867e75 <unknown>\nE       #8 0x565491b0befd <unknown>\nE       #9 0x565491b2519b <unknown>\nE       #10 0x565491b0dc65 <unknown>\nE       #11 0x565491b25ec8 <unknown>\nE       #12 0x565491b01360 <unknown>\nE       #13 0x565491b41a68 <unknown>\nE       #14 0x565491b41be8 <unknown>\nE       #15 0x565491b5b7fd <unknown>\nE       #16 0x7f39bc130609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8c724e0a9bdf8c23",
      "name" : "log",
      "source" : "8c724e0a9bdf8c23.txt",
      "type" : "text/plain",
      "size" : 751
    }, {
      "uid" : "953d70d54b19a58f",
      "name" : "stderr",
      "source" : "953d70d54b19a58f.txt",
      "type" : "text/plain",
      "size" : 418
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_balance_page"
  }, {
    "name" : "subSuite",
    "value" : "TestBalancePage"
  }, {
    "name" : "host",
    "value" : "fv-az290-985"
  }, {
    "name" : "thread",
    "value" : "2237-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_balance_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "19cab0ba1d4c6de",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/8//#testresult/19cab0ba1d4c6de",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559a4fc6dad3 <unknown>\n#1 0x559a4f9cd568 <unknown>\n#2 0x559a4f9f0b37 <unknown>\n#3 0x559a4f9ec23a <unknown>\n#4 0x559a4fa272ba <unknown>\n#5 0x559a4fa214e3 <unknown>\n#6 0x559a4f9f6d1a <unknown>\n#7 0x559a4f9f7e75 <unknown>\n#8 0x559a4fc9befd <unknown>\n#9 0x559a4fcb519b <unknown>\n#10 0x559a4fc9dc65 <unknown>\n#11 0x559a4fcb5ec8 <unknown>\n#12 0x559a4fc91360 <unknown>\n#13 0x559a4fcd1a68 <unknown>\n#14 0x559a4fcd1be8 <unknown>\n#15 0x559a4fceb7fd <unknown>\n#16 0x7f7cfb28f609 <unknown>",
        "time" : {
          "start" : 1650553922408,
          "stop" : 1650553922408,
          "duration" : 0
        }
      }, {
        "uid" : "258f106fb8d0d0c6",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/7//#testresult/258f106fb8d0d0c6",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55d435af9ad3 <unknown>\n#1 0x55d435859568 <unknown>\n#2 0x55d43587cb37 <unknown>\n#3 0x55d43587823a <unknown>\n#4 0x55d4358b32ba <unknown>\n#5 0x55d4358ad4e3 <unknown>\n#6 0x55d435882d1a <unknown>\n#7 0x55d435883e75 <unknown>\n#8 0x55d435b27efd <unknown>\n#9 0x55d435b4119b <unknown>\n#10 0x55d435b29c65 <unknown>\n#11 0x55d435b41ec8 <unknown>\n#12 0x55d435b1d360 <unknown>\n#13 0x55d435b5da68 <unknown>\n#14 0x55d435b5dbe8 <unknown>\n#15 0x55d435b777fd <unknown>\n#16 0x7f2bd10c4609 <unknown>",
        "time" : {
          "start" : 1650553735044,
          "stop" : 1650553735044,
          "duration" : 0
        }
      }, {
        "uid" : "297186a28efb367c",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/6//#testresult/297186a28efb367c",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x564c2b805ad3 <unknown>\n#1 0x564c2b565568 <unknown>\n#2 0x564c2b588b37 <unknown>\n#3 0x564c2b58423a <unknown>\n#4 0x564c2b5bf2ba <unknown>\n#5 0x564c2b5b94e3 <unknown>\n#6 0x564c2b58ed1a <unknown>\n#7 0x564c2b58fe75 <unknown>\n#8 0x564c2b833efd <unknown>\n#9 0x564c2b84d19b <unknown>\n#10 0x564c2b835c65 <unknown>\n#11 0x564c2b84dec8 <unknown>\n#12 0x564c2b829360 <unknown>\n#13 0x564c2b869a68 <unknown>\n#14 0x564c2b869be8 <unknown>\n#15 0x564c2b8837fd <unknown>\n#16 0x7fdccad10609 <unknown>",
        "time" : {
          "start" : 1650553582813,
          "stop" : 1650553582813,
          "duration" : 0
        }
      }, {
        "uid" : "e95c82c16706b3ab",
        "reportUrl" : "https://ArkadiyVoronov.github.io/Test_with_a_team/4//#testresult/e95c82c16706b3ab",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x558c4a1e3ad3 <unknown>\n#1 0x558c49f43568 <unknown>\n#2 0x558c49f66b37 <unknown>\n#3 0x558c49f6223a <unknown>\n#4 0x558c49f9d2ba <unknown>\n#5 0x558c49f974e3 <unknown>\n#6 0x558c49f6cd1a <unknown>\n#7 0x558c49f6de75 <unknown>\n#8 0x558c4a211efd <unknown>\n#9 0x558c4a22b19b <unknown>\n#10 0x558c4a213c65 <unknown>\n#11 0x558c4a22bec8 <unknown>\n#12 0x558c4a207360 <unknown>\n#13 0x558c4a247a68 <unknown>\n#14 0x558c4a247be8 <unknown>\n#15 0x558c4a2617fd <unknown>\n#16 0x7fa03db93609 <unknown>",
        "time" : {
          "start" : 1650552881559,
          "stop" : 1650552881559,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fb4fe355a198104f.json",
  "parameterValues" : [ ]
}